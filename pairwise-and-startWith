pairwise Парный оператор является отличным инструментом, если также нужно предыдущее значение для каждого элемента. 
Он использует буфер с размером 2, что делает его памятью эффективной. 
Проблема заключается в том, что он не испускает на первом элементе, что делает его результаты на один элемент короче, чем вход.

of(1, 2, 3).pipe(
  pairwise()
).subscribe(console.log.bind(console));

// [1, 2]
// [2, 3]
Т.е. здесь на вход идет 3 значения (1, 2, 3), а на выходе на одно меньше.
Чтобы на выходе было тоже три, можно добавить startWith(0)


of(1, 2, 3).pipe(
  startWith(0),// <--------------------------------
  pairwise()
).subscribe(console.log.bind(console));

// [0, 1]
// [1, 2]
// [2. 3]

Пример 2. Вывести название полей формы, которые изменились:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [ReactiveFormsModule],
  template: `
    <form [formGroup]="myForm" >
      <input name="name"  formControlName="name" />
      <input name="email" formControlName="email" />
</form>
  `,
})
export class App {
  name = 'Angular';
  public myForm = inject(FormBuilder).nonNullable.group({
    name: '',
    email: '',
  });

  constructor() {
    // track changes in the form
    this.myForm.valueChanges
      .pipe(
        /*takeUntil(this.destroy$),*/
        // start with the initial form state
        startWith(this.myForm.value),
        // get the previous and current form values
        pairwise(),
        // get changed fields
        map(([prev, curr]) => this.getChangedFields(prev, curr)),
        // filter only distinct field keys
        scan((acc, curr) => 
            [...new Set([...acc, ...curr])], [] as string[]
        )
      )
      .subscribe((fieldChange) => {
        console.log('Changed fields:', fieldChange);
      });
  }

  /**
   * identify which fields have changed between two states.
   * @returns - name of the field (name, email, age)
   */
  private getChangedFields(previous: any, current: any): string[] {
    return Object.keys(current).filter(
		(key) => previous[key] !== current[key]
	);
  }
}
